<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" href="opengl-man.css" /><title>glTexImage2D - OpenGL ES 3.0 Reference Pages</title><meta name="generator" content="DocBook XSL Stylesheets V1.78.1" /></head><body><div class="refentry"><a id="glTexImage2D"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glTexImage2D — specify a two-dimensional texture image</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" class="funcprototype-table" summary="Function synopsis" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glTexImage2D</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">level</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">internalFormat</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">width</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">height</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">border</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">format</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">type</var>, </td></tr><tr><td> </td><td>const GLvoid * <var class="pdparam">data</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target texture.
                    Must be <code class="constant">GL_TEXTURE_2D</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>level</code></em></span></dt><dd><p>
                    Specifies the level-of-detail number.
                    Level 0 is the base image level.
                    Level <span class="emphasis"><em>n</em></span> is the <span class="emphasis"><em>n</em></span>th mipmap reduction image.
                </p></dd><dt><span class="term"><em class="parameter"><code>internalFormat</code></em></span></dt><dd><p>
                    Specifies the number of color components in the texture.
                    Must be one of base internal formats given in Table 1, or
                    one of the sized internal formats given in Table 2, below.
                </p></dd><dt><span class="term"><em class="parameter"><code>width</code></em></span></dt><dd><p>
                    Specifies the width of the texture image.
                    All implementations support texture images that are at least 2048 texels
                    wide.
                </p></dd><dt><span class="term"><em class="parameter"><code>height</code></em></span></dt><dd><p>
                    Specifies the height of the texture image.
                    All implementations support texture images that are at least 2048 texels
                    high.
                </p></dd><dt><span class="term"><em class="parameter"><code>border</code></em></span></dt><dd><p>
                    This value must be 0.
                </p></dd><dt><span class="term"><em class="parameter"><code>format</code></em></span></dt><dd><p>
                    Specifies the format of the pixel data.
                    The following symbolic values are accepted:
                    <code class="constant">GL_RED</code>,
                    <code class="constant">GL_RED_INTEGER</code>,
                    <code class="constant">GL_RG</code>,
                    <code class="constant">GL_RG_INTEGER</code>,
                    <code class="constant">GL_RGB</code>,
                    <code class="constant">GL_RGB_INTEGER</code>,
                    <code class="constant">GL_RGBA</code>, 
                    <code class="constant">GL_RGBA_INTEGER</code>, 
                    <code class="constant">GL_DEPTH_COMPONENT</code>,
                    <code class="constant">GL_DEPTH_STENCIL</code>,
                    <code class="constant">GL_LUMINANCE_ALPHA</code>,
                    <code class="constant">GL_LUMINANCE</code>, and
                    <code class="constant">GL_ALPHA</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>type</code></em></span></dt><dd><p>
                    Specifies the data type of the pixel data.
                    The following symbolic values are accepted:
                    <code class="constant">GL_UNSIGNED_BYTE</code>,
                    <code class="constant">GL_BYTE</code>,
                    <code class="constant">GL_UNSIGNED_SHORT</code>,
                    <code class="constant">GL_SHORT</code>,
                    <code class="constant">GL_UNSIGNED_INT</code>,
                    <code class="constant">GL_INT</code>,
                    <code class="constant">GL_HALF_FLOAT</code>,
                    <code class="constant">GL_FLOAT</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_5_6_5</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_4_4_4_4</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_5_5_5_1</code>,
                    <code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code>,
                    <code class="constant">GL_UNSIGNED_INT_10F_11F_11F_REV</code>,
                    <code class="constant">GL_UNSIGNED_INT_5_9_9_9_REV</code>,
                    <code class="constant">GL_UNSIGNED_INT_24_8</code>, and
                    <code class="constant">GL_FLOAT_32_UNSIGNED_INT_24_8_REV</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>data</code></em></span></dt><dd><p>
                    Specifies a pointer to the image data in memory.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            Texturing allows elements of an image array to be read by shaders.
        </p><p>
            To define texture images, call <code class="function">glTexImage2D</code>.
            The arguments describe the parameters of the texture image,
            such as height, width, width of the border, level-of-detail number
            (see <a class="citerefentry" href="glTexParameter.xml"><span class="citerefentry"><span class="refentrytitle">glTexParameter</span></span></a>),
            and number of color components provided.
            The last three arguments describe how the image is represented in memory.
        </p><p>
            If <em class="parameter"><code>target</code></em> is <code class="constant">GL_TEXTURE_2D</code>
            or one of the <code class="constant">GL_TEXTURE_CUBE_MAP</code>
            targets, data is read from <em class="parameter"><code>data</code></em> as a sequence of signed or unsigned
            bytes, shorts, or longs, or single-precision floating-point values,
            depending on <em class="parameter"><code>type</code></em>.  These values are grouped into sets of one, two,
            three, or four values, depending on <em class="parameter"><code>format</code></em>, to form elements.
        </p><p>
            If a non-zero named buffer object is bound to the <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target 
            (see <a class="citerefentry" href="glBindBuffer.xml"><span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span></a>) while a texture image is
            specified, <em class="parameter"><code>data</code></em> is treated as a byte offset into the buffer object's data store.
        </p><p>
            The first element corresponds to the lower left corner of the texture image.
            Subsequent elements progress left-to-right through the remaining texels
            in the lowest row of the texture image, and then in successively higher
            rows of the texture image.
            The final element corresponds to the upper right corner of the texture
            image.
        </p><p>
            <em class="parameter"><code>format</code></em> determines the composition of each element in <em class="parameter"><code>data</code></em>.
            It can assume one of these symbolic values:
        </p><div class="variablelist"><dl class="variablelist"><dt><span class="term"><code class="constant">GL_RED</code></span></dt><dd><p>
                        Each element is a single red component.
                        For fixed point normalized components, the GL converts it to floating point, clamps to the range [0,1], 
                                                and assembles it into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha.
                    </p></dd><dt><span class="term"><code class="constant">GL_RED_INTEGER</code></span></dt><dd><p>
                        Each element is a single red component. 
                        The GL performs assembles it into an RGBA element by attaching 0 for green and blue, and 1 for alpha.
                    </p></dd><dt><span class="term"><code class="constant">GL_RG</code></span></dt><dd><p>
                        Each element is a red/green double.
                        For fixed point normalized components, the GL converts each component to floating point, clamps to the range [0,1], 
                                                and assembles them into an RGBA element by attaching 0.0 for blue, and 1.0 for alpha.
                    </p></dd><dt><span class="term"><code class="constant">GL_RG</code></span></dt><dd><p>
                        Each element is a red/green double.
                        The GL assembles them into an RGBA element by attaching 0 for blue, and 1 for alpha.
                    </p></dd><dt><span class="term"><code class="constant">GL_RGB</code></span></dt><dd><p>
                        Each element is an RGB triple.
                        For fixed point normalized components, the GL converts each component to floating point, clamps to the range [0,1], 
                                                and assembles them into an RGBA element by attaching 1.0 for alpha.
                    </p></dd><dt><span class="term"><code class="constant">GL_RGB_INTEGER</code></span></dt><dd><p>
                        Each element is an RGB triple.
                                                The GL assembles them into an RGBA element by attaching 1 for alpha.
                    </p></dd><dt><span class="term"><code class="constant">GL_RGBA</code></span></dt><dd><p>
                        Each element contains all four components.
                        For fixed point normalized components, the GL converts each component to floating point and 
                                                clamps them to the range [0,1].
                    </p></dd><dt><span class="term"><code class="constant">GL_RGBA_INTEGER</code></span></dt><dd><p>
                        Each element contains all four components.
                    </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_COMPONENT</code></span></dt><dd><p>
                        Each element is a single depth value.
                        The GL converts it to floating point, and clamps to the range [0,1].
                    </p></dd><dt><span class="term"><code class="constant">GL_DEPTH_STENCIL</code></span></dt><dd><p>
                        Each element is a pair of depth and stencil values. The depth component of
                        the pair is interpreted as in <code class="constant">GL_DEPTH_COMPONENT</code>. The stencil
                        component is interpreted based on specified the depth + stencil internal format.
                     </p></dd><dt><span class="term"><code class="constant">GL_LUMINANCE_ALPHA</code></span></dt><dd><p>
                        Each element is an luminance/alpha double.
                        The GL converts each component to floating point, clamps to the range [0,1], 
                                                and assembles them into an RGBA element by placing the luminance value in the red, green and blue channels.
                    </p></dd><dt><span class="term"><code class="constant">GL_LUMINANCE</code></span></dt><dd><p>
                        Each element is a single luminance component.
                        The GL converts it to floating point, clamps to the range [0,1], 
                                                and assembles it into an RGBA element by placing the luminance value in the red, green and blue channels,
                                                and attaching 1.0 to the alpha channel.
                    </p></dd><dt><span class="term"><code class="constant">GL_ALPHA</code></span></dt><dd><p>
                        Each element is a single alpha component.
                        The GL converts it to floating point, clamps to the range [0,1], 
                                                and assembles it into an RGBA element by placing attaching 0.0 to the red, green and blue channels.
                    </p></dd></dl></div><p>
            If an application wants to store the texture at a certain
            resolution or in a certain format, it can request the resolution
            and format with <em class="parameter"><code>internalFormat</code></em>. The GL will choose an internal
            representation with least the internal component sizes, and exactly the component types shown for that
                        format, although it may not match exactly.
        </p><p>
            <em class="parameter"><code>internalFormat</code></em> may be one of the unsized (base) internal formats shown, together with valid
                        <em class="parameter"><code>format</code></em> and <em class="parameter"><code>type</code></em> combinations, in Table 1, below
        </p><p>
            </p><div class="table"><a id="idp13945152"></a><p class="title"><strong>Table 1. Unsized Internal Formats</strong></p><div class="table-contents"><table summary="Unsized Internal Formats" border="1"><colgroup><col align="left" /><col align="left" /><col align="left" /></colgroup><thead><tr><th align="left"><span class="bold"><strong>
            Unsized Internal Format
            </strong></span></th><th align="left"><span class="bold"><strong>
            Format
            </strong></span></th><th align="left"><span class="bold"><strong>
            Type
            </strong></span></th><th align="left"><span class="bold"><strong>
            RGBA and Luminance Values
            </strong></span></th><th align="left"><span class="bold"><strong>
            Internal Components
            </strong></span></th></tr></thead><tbody><tr><td align="left"><code class="constant">GL_RGB</code></td><td align="left"><code class="constant">GL_RGB</code></td><td align="left"><code class="constant">GL_UNSIGNED_BYTE</code>,<p><code class="constant">GL_UNSIGNED_SHORT_5_6_5</code></p></td><td align="left">Red, Green, Blue</td><td align="left">R, G, B</td></tr><tr><td align="left"><code class="constant">GL_RGBA</code></td><td align="left"><code class="constant">GL_RGBA</code></td><td align="left"><code class="constant">GL_UNSIGNED_BYTE</code>,<p><code class="constant">GL_UNSIGNED_SHORT_4_4_4_4</code>,</p>
                        <code class="constant">GL_UNSIGNED_SHORT_5_5_5_1</code></td><td align="left">Red, Green, Blue, Alpha</td><td align="left">R, G, B, A</td></tr><tr><td align="left"><code class="constant">GL_LUMINANCE_ALPHA</code></td><td align="left"><code class="constant">GL_LUMINANCE_ALPHA</code></td><td align="left"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="left">Luminance, Alpha</td><td align="left">L, A</td></tr><tr><td align="left"><code class="constant">GL_LUMINANCE</code></td><td align="left"><code class="constant">GL_LUMINANCE</code></td><td align="left"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="left">Luminance</td><td align="left">L</td></tr><tr><td align="left"><code class="constant">GL_ALPHA</code></td><td align="left"><code class="constant">GL_ALPHA</code></td><td align="left"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="left">Alpha</td><td align="left">A</td></tr></tbody></table></div></div><p><br class="table-break" />
        </p><p>
            <em class="parameter"><code>internalFormat</code></em> may also be one of the sized internal formats shown, together with valid
            <em class="parameter"><code>format</code></em> and <em class="parameter"><code>type</code></em> combinations, in Table 2, below
        </p><p>
            </p><div class="table"><a id="idp13330896"></a><p class="title"><strong>Table 2. Sized Internal Formats</strong></p><div class="table-contents"><table summary="Sized Internal Formats" border="1"><colgroup><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /></colgroup><thead><tr><th align="center"><span class="bold"><strong>
            Sized Internal Format
            </strong></span></th><th align="center"><span class="bold"><strong>
            Format
            </strong></span></th><th align="center"><span class="bold"><strong>
            Type
            </strong></span></th><th align="center"><span class="bold"><strong>
            Red Bits
            </strong></span></th><th align="center"><span class="bold"><strong>
            Green Bits
            </strong></span></th><th align="center"><span class="bold"><strong>
            Blue Bits
            </strong></span></th><th align="center"><span class="bold"><strong>
            Alpha Bits
            </strong></span></th><th align="center"><span class="bold"><strong>
            Shared Bits
            </strong></span></th><th align="center"><span class="bold"><strong>
            Color renderable
            </strong></span></th><th align="center"><span class="bold"><strong>
            Texture filterable
            </strong></span></th></tr></thead><tbody><tr><td align="center"><code class="constant">GL_R8</code></td><td align="center"><code class="constant">GL_RED</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_R8_SNORM</code></td><td align="center"><code class="constant">GL_RED</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">s8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_R16F</code></td><td align="center"><code class="constant">GL_RED</code></td><td align="center"><code class="constant">GL_HALF_FLOAT</code>,<p><code class="constant">GL_FLOAT</code></p></td><td align="center">f16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_R32F</code></td><td align="center"><code class="constant">GL_RED</code></td><td align="center"><code class="constant">GL_FLOAT</code></td><td align="center">f32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_R8UI</code></td><td align="center"><code class="constant">GL_RED_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">ui8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_R8I</code></td><td align="center"><code class="constant">GL_RED_INTEGER</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">i8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_R16UI</code></td><td align="center"><code class="constant">GL_RED_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_SHORT</code></td><td align="center">ui16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_R16I</code></td><td align="center"><code class="constant">GL_RED_INTEGER</code></td><td align="center"><code class="constant">GL_SHORT</code></td><td align="center">i16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_R32UI</code></td><td align="center"><code class="constant">GL_RED_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT</code></td><td align="center">ui32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_R32I</code></td><td align="center"><code class="constant">GL_RED_INTEGER</code></td><td align="center"><code class="constant">GL_INT</code></td><td align="center">i32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RG8</code></td><td align="center"><code class="constant">GL_RG</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">8</td><td align="center">8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RG8_SNORM</code></td><td align="center"><code class="constant">GL_RG</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">s8</td><td align="center">s8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RG16F</code></td><td align="center"><code class="constant">GL_RG</code></td><td align="center"><code class="constant">GL_HALF_FLOAT</code>,<p><code class="constant">GL_FLOAT</code></p></td><td align="center">f16</td><td align="center">f16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RG32F</code></td><td align="center"><code class="constant">GL_RG</code></td><td align="center"><code class="constant">GL_FLOAT</code></td><td align="center">f32</td><td align="center">f32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RG8UI</code></td><td align="center"><code class="constant">GL_RG_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">ui8</td><td align="center">ui8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RG8I</code></td><td align="center"><code class="constant">GL_RG_INTEGER</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">i8</td><td align="center">i8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RG16UI</code></td><td align="center"><code class="constant">GL_RG_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_SHORT</code></td><td align="center">ui16</td><td align="center">ui16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RG16I</code></td><td align="center"><code class="constant">GL_RG_INTEGER</code></td><td align="center"><code class="constant">GL_SHORT</code></td><td align="center">i16</td><td align="center">i16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RG32UI</code></td><td align="center"><code class="constant">GL_RG_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT</code></td><td align="center">ui32</td><td align="center">ui32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RG32I</code></td><td align="center"><code class="constant">GL_RG_INTEGER</code></td><td align="center"><code class="constant">GL_INT</code></td><td align="center">i32</td><td align="center">i32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB8</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">8</td><td align="center">8</td><td align="center">8</td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_SRGB8</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">8</td><td align="center">8</td><td align="center">8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGB565</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code>,<p><code class="constant">GL_UNSIGNED_SHORT_5_6_5</code></p></td><td align="center">5</td><td align="center">6</td><td align="center">5</td><td align="center"> </td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGB8_SNORM</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">s8</td><td align="center">s8</td><td align="center">s8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_R11F_G11F_B10F</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT_10F_11F_11F_REV</code>,<p><code class="constant">GL_HALF_FLOAT</code>,</p>
                        <code class="constant">GL_FLOAT</code></td><td align="center">f11</td><td align="center">f11</td><td align="center">f10</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGB9_E5</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT_5_9_9_9_REV</code>,<p><code class="constant">GL_HALF_FLOAT</code>,</p>
                        <code class="constant">GL_FLOAT</code></td><td align="center">9</td><td align="center">9</td><td align="center">9</td><td align="center"> </td><td align="center">5</td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGB16F</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_HALF_FLOAT</code>,<p><code class="constant">GL_FLOAT</code></p></td><td align="center">f16</td><td align="center">f16</td><td align="center">f16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGB32F</code></td><td align="center"><code class="constant">GL_RGB</code></td><td align="center"><code class="constant">GL_FLOAT</code></td><td align="center">f32</td><td align="center">f32</td><td align="center">f32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB8UI</code></td><td align="center"><code class="constant">GL_RGB_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">ui8</td><td align="center">ui8</td><td align="center">ui8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB8I</code></td><td align="center"><code class="constant">GL_RGB_INTEGER</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">i8</td><td align="center">i8</td><td align="center">i8</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB16UI</code></td><td align="center"><code class="constant">GL_RGB_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_SHORT</code></td><td align="center">ui16</td><td align="center">ui16</td><td align="center">ui16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB16I</code></td><td align="center"><code class="constant">GL_RGB_INTEGER</code></td><td align="center"><code class="constant">GL_SHORT</code></td><td align="center">i16</td><td align="center">i16</td><td align="center">i16</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB32UI</code></td><td align="center"><code class="constant">GL_RGB_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT</code></td><td align="center">ui32</td><td align="center">ui32</td><td align="center">ui32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB32I</code></td><td align="center"><code class="constant">GL_RGB_INTEGER</code></td><td align="center"><code class="constant">GL_INT</code></td><td align="center">i32</td><td align="center">i32</td><td align="center">i32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGBA8</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">8</td><td align="center">8</td><td align="center">8</td><td align="center">8</td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_SRGB8_ALPHA8</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">8</td><td align="center">8</td><td align="center">8</td><td align="center">8</td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGBA8_SNORM</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">s8</td><td align="center">s8</td><td align="center">s8</td><td align="center">s8</td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGB5_A1</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code>,<p><code class="constant">GL_UNSIGNED_SHORT_5_5_5_1</code>,</p>
                        <code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code></td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">1</td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGBA4</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code>,<p><code class="constant">GL_UNSIGNED_SHORT_4_4_4_4</code></p></td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGB10_A2</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code></td><td align="center">10</td><td align="center">10</td><td align="center">10</td><td align="center">2</td><td align="center"> </td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGBA16F</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_HALF_FLOAT</code>,<p><code class="constant">GL_FLOAT</code></p></td><td align="center">f16</td><td align="center">f16</td><td align="center">f16</td><td align="center">f16</td><td align="center"> </td><td align="center"> </td><td align="center">Y</td></tr><tr><td align="center"><code class="constant">GL_RGBA32F</code></td><td align="center"><code class="constant">GL_RGBA</code></td><td align="center"><code class="constant">GL_FLOAT</code></td><td align="center">f32</td><td align="center">f32</td><td align="center">f32</td><td align="center">f32</td><td align="center"> </td><td align="center"> </td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGBA8UI</code></td><td align="center"><code class="constant">GL_RGBA_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_BYTE</code></td><td align="center">ui8</td><td align="center">ui8</td><td align="center">ui8</td><td align="center">ui8</td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGBA8I</code></td><td align="center"><code class="constant">GL_RGBA_INTEGER</code></td><td align="center"><code class="constant">GL_BYTE</code></td><td align="center">i8</td><td align="center">i8</td><td align="center">i8</td><td align="center">i8</td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGB10_A2UI</code></td><td align="center"><code class="constant">GL_RGBA_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code></td><td align="center">ui10</td><td align="center">ui10</td><td align="center">ui10</td><td align="center">ui2</td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGBA16UI</code></td><td align="center"><code class="constant">GL_RGBA_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_SHORT</code></td><td align="center">ui16</td><td align="center">ui16</td><td align="center">ui16</td><td align="center">ui16</td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGBA16I</code></td><td align="center"><code class="constant">GL_RGBA_INTEGER</code></td><td align="center"><code class="constant">GL_SHORT</code></td><td align="center">i16</td><td align="center">i16</td><td align="center">i16</td><td align="center">i16</td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGBA32I</code></td><td align="center"><code class="constant">GL_RGBA_INTEGER</code></td><td align="center"><code class="constant">GL_INT</code></td><td align="center">i32</td><td align="center">i32</td><td align="center">i32</td><td align="center">i32</td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_RGBA32UI</code></td><td align="center"><code class="constant">GL_RGBA_INTEGER</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT</code></td><td align="center">ui32</td><td align="center">ui32</td><td align="center">ui32</td><td align="center">ui32</td><td align="center"> </td><td align="center">Y</td><td align="center"> </td></tr></tbody></table><table summary="Sized Internal Formats" border="1"><colgroup><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /></colgroup><thead><tr><th align="center"><span class="bold"><strong>
            Sized Internal Format
            </strong></span></th><th align="center"><span class="bold"><strong>
            Format
            </strong></span></th><th align="center"><span class="bold"><strong>
            Type
            </strong></span></th><th align="center"><span class="bold"><strong>
            Depth Bits
            </strong></span></th><th align="center"><span class="bold"><strong>
            Stencil Bits
            </strong></span></th></tr></thead><tbody><tr><td align="center"><code class="constant">GL_DEPTH_COMPONENT16</code></td><td align="center"><code class="constant">GL_DEPTH_COMPONENT</code></td><td align="center"><code class="constant">GL_UNSIGNED_SHORT</code>,<p><code class="constant">GL_UNSIGNED_INT</code></p></td><td align="center">16</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_DEPTH_COMPONENT24</code></td><td align="center"><code class="constant">GL_DEPTH_COMPONENT</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT</code></td><td align="center">24</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_DEPTH_COMPONENT32F</code></td><td align="center"><code class="constant">GL_DEPTH_COMPONENT</code></td><td align="center"><code class="constant">GL_FLOAT</code></td><td align="center">f32</td><td align="center"> </td></tr><tr><td align="center"><code class="constant">GL_DEPTH24_STENCIL8</code></td><td align="center"><code class="constant">GL_DEPTH_STENCIL</code></td><td align="center"><code class="constant">GL_UNSIGNED_INT_24_8</code></td><td align="center">24</td><td align="center">8</td></tr><tr><td align="center"><code class="constant">GL_DEPTH32F_STENCIL8</code></td><td align="center"><code class="constant">GL_DEPTH_STENCIL</code></td><td align="center"><code class="constant">GL_FLOAT_32_UNSIGNED_INT_24_8_REV</code></td><td align="center">f32</td><td align="center">8</td></tr></tbody></table></div></div><p><br class="table-break" />
        </p><p>
            If the <em class="parameter"><code>internalFormat</code></em> parameter is             
            <code class="constant">GL_SRGB8</code>, or
            <code class="constant">GL_SRGB8_ALPHA8</code>, the texture is treated as if the red, green, or blue components are encoded in the sRGB color space.    Any alpha component is left unchanged.  The conversion from the sRGB encoded component 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <mml:msub><mml:mi mathvariant="italic">c</mml:mi>
                <mml:mi mathvariant="italic">s</mml:mi>
                </mml:msub>
            </mml:math>
            to a linear component 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <mml:msub><mml:mi mathvariant="italic">c</mml:mi>
                <mml:mi mathvariant="italic">l</mml:mi>
                </mml:msub>
            </mml:math>
            is:
        </p><p>
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
            <mml:mrow>
                <mml:msub>
                  <mml:mi mathvariant="italic">c</mml:mi>
                  <mml:mi mathvariant="italic">l</mml:mi>
                </mml:msub>
                <mml:mo>=</mml:mo>
                <mml:mrow>
                  <mml:mo>{</mml:mo>
            
                  <mml:mtable columnalign="left">
                    <mml:mtr>
                      <mml:mtd columnalign="left">
                        <mml:mfrac>
                          <mml:msub>
                            <mml:mi mathvariant="italic">c</mml:mi>
                            <mml:mi mathvariant="italic">s</mml:mi>
                          </mml:msub>
                          <mml:mn>12.92</mml:mn>
                        </mml:mfrac>
                      </mml:mtd>
                      <mml:mtd columnalign="left">
                        <mml:mrow>
                          <mml:mspace width="1ex"></mml:mspace>
                          <mml:mo>if</mml:mo>
                          <mml:mspace width="1ex"></mml:mspace>
                        </mml:mrow>
                        <mml:msub>
                          <mml:mi mathvariant="italic">c</mml:mi>
                          <mml:mi mathvariant="italic">s</mml:mi>
                        </mml:msub>
                        <mml:mo>≤</mml:mo>
                        <mml:mn>0.04045</mml:mn>
                      </mml:mtd>
                    </mml:mtr>
                    <mml:mtr>
                    <mml:mtd columnalign="left">
                    <mml:msup>
                      <mml:mrow>
                        <mml:mo>(</mml:mo>
                        <mml:mfrac>
                          <mml:mrow>
                            <mml:msub>
                              <mml:mi>c</mml:mi>
                              <mml:mi>s</mml:mi>
                            </mml:msub>
                            <mml:mo>+</mml:mo>
                            <mml:mn>0.055</mml:mn>
                          </mml:mrow>
                          <mml:mn>1.055</mml:mn>
                        </mml:mfrac>
                        <mml:mo>)</mml:mo>
                      </mml:mrow>
                      <mml:mn>2.4</mml:mn>
                    </mml:msup>
                    </mml:mtd>
                        <mml:mtd columnalign="left">
                        <mml:mrow>
                          <mml:mspace width="1ex"></mml:mspace>
                          <mml:mo>if</mml:mo>
                          <mml:mspace width="1ex"></mml:mspace>
                        </mml:mrow>
                        <mml:msub>
                          <mml:mi mathvariant="italic">c</mml:mi>
                          <mml:mi mathvariant="italic">s</mml:mi>
                        </mml:msub>
                        <mml:mo>&gt;</mml:mo>
                        <mml:mn>0.04045</mml:mn>
                      </mml:mtd>
                    </mml:mtr>
                  </mml:mtable>
                </mml:mrow>
                </mml:mrow>
            </mml:math>
        </p><p>
            Assume         
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                <mml:msub><mml:mi mathvariant="italic">c</mml:mi>
                <mml:mi mathvariant="italic">s</mml:mi>
                </mml:msub>
            </mml:math>
            is the sRGB component in the range [0,1].
       </p><p>
            A one-component texture image uses only the red component of the RGBA
            color extracted from <em class="parameter"><code>data</code></em>.
            A two-component image uses the R and G values.
            A three-component image uses the R, G, and B values.
            A four-component image uses all of the RGBA components.
        </p><p>
            Image-based shadowing can be enabled by comparing texture r coordinates to
            depth texture values to generate a boolean result.
            See <a class="citerefentry" href="glTexParameter.xml"><span class="citerefentry"><span class="refentrytitle">glTexParameter</span></span></a> for details on texture comparison.
        </p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            The <a class="citerefentry" href="glPixelStorei.xml"><span class="citerefentry"><span class="refentrytitle">glPixelStorei</span></span></a> mode affects texture images.
        </p><p>
            <em class="parameter"><code>data</code></em> may be a null pointer.
            In this case, texture memory is
            allocated to accommodate a texture of width <em class="parameter"><code>width</code></em> and height <em class="parameter"><code>height</code></em>.
            You can then download subtextures to initialize this
            texture memory.
            The image is undefined if the user tries to apply
            an uninitialized portion of the texture image to a primitive.
        </p><p>
            <code class="function">glTexImage2D</code> specifies the two-dimensional texture for the texture object bound to the current texture unit,
            specified with <a class="citerefentry" href="glActiveTexture.xml"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not
            <code class="constant">GL_TEXTURE_2D</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is one of the six cube map 2D image targets
                        and the width and height parameters are not equal.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>type</code></em> is not a type constant.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>width</code></em> is less than 0
            or greater than <code class="constant">GL_MAX_TEXTURE_SIZE</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>level</code></em> is less than 0.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> may be generated if <em class="parameter"><code>level</code></em> is greater than 
            <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
                
                <mml:mrow>
                    <mml:msub><mml:mi mathvariant="italic">log</mml:mi>
                    <mml:mn>2</mml:mn>
                    </mml:msub>
                    <mml:mo>⁡</mml:mo>
                    <mml:mfenced open="(" close=")">
                        <mml:mi mathvariant="italic">max</mml:mi>
                    </mml:mfenced>
                </mml:mrow>
            </mml:math>,
            where <span class="emphasis"><em>max</em></span> is the returned value of <code class="constant">GL_MAX_TEXTURE_SIZE</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>internalFormat</code></em> is not one of the
            accepted resolution and format symbolic constants.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>width</code></em> or <em class="parameter"><code>height</code></em> is less than 0
            or greater than <code class="constant">GL_MAX_TEXTURE_SIZE</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>border</code></em> is not 0.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if the combination of  <em class="parameter"><code>internalFormat</code></em>,
            <em class="parameter"><code>format</code></em> and <em class="parameter"><code>type</code></em> is not one of those in the tables above.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the
            <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target and the buffer object's data store is currently mapped.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the
            <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target and the data would be unpacked from the buffer 
            object such that the memory reads required would exceed the data store size.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the
            <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target and <em class="parameter"><code>data</code></em> is not evenly divisible 
            into the number of bytes needed to store in memory a datum indicated by <em class="parameter"><code>type</code></em>.
        </p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a class="citerefentry" href="glGet.xml"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a> with argument <code class="constant">GL_PIXEL_UNPACK_BUFFER_BINDING</code>
        </p></div><div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glActiveTexture.xml"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>,
            <a class="citerefentry" href="glCopyTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexImage2D</span></span></a>,
            <a class="citerefentry" href="glCopyTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexSubImage2D</span></span></a>,
            <a class="citerefentry" href="glCopyTexSubImage3D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexSubImage3D</span></span></a>,
            <a class="citerefentry" href="glPixelStorei.xml"><span class="citerefentry"><span class="refentrytitle">glPixelStorei</span></span></a>,
            <a class="citerefentry" href="glTexImage3D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage3D</span></span></a>,
            <a class="citerefentry" href="glTexStorage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexStorage2D</span></span></a>,
            <a class="citerefentry" href="glTexStorage3D.xml"><span class="citerefentry"><span class="refentrytitle">glTexStorage3D</span></span></a>,
            <a class="citerefentry" href="glTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexSubImage2D</span></span></a>,
            <a class="citerefentry" href="glTexSubImage3D.xml"><span class="citerefentry"><span class="refentrytitle">glTexSubImage3D</span></span></a>,
            <a class="citerefentry" href="glTexParameter.xml"><span class="citerefentry"><span class="refentrytitle">glTexParameter</span></span></a>
        </p></div><div class="refsect1"><a id="Copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 1991-2006 Silicon Graphics, Inc.
            Copyright <span class="trademark"></span>© 2011-2013 Khronos Group.
            This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="http://oss.sgi.com/projects/FreeB/" target="_top">http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div></body></html>
